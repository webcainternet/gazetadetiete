<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 * 
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a new 'custom-functions.php' file in the theme folder.
 *  They will be added to the theme automatically.
 * 
 ***************************************************************************/

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action( 'after_setup_theme', 'themify_theme_init_types' );

// Enqueue scripts and styles required by theme
add_action( 'wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 11 );

// Browser compatibility
add_action( 'wp_head', 'themify_ie_enhancements' );
add_action( 'wp_head', 'themify_viewport_tag' );
add_action( 'wp_head', 'themify_ie_standards_compliant');

// Register custom menu
add_action( 'init', 'themify_register_custom_nav');

// Register sidebars
add_action( 'widgets_init', 'themify_theme_register_sidebars' );

/////// Filters ////////
add_filter( 'themify_parallax_header', 'themify_disable_parallax_header_on_mobile' );

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts(){
	global $themify;

	// Get theme version for Themify theme scripts and styles
	$theme_version = wp_get_theme()->display('Version');

	///////////////////
	//Enqueue styles
	///////////////////

	// Google Web Fonts embedding
	wp_enqueue_style( 'google-fonts', themify_https_esc('http://fonts.googleapis.com/css'). '?family=Lato:100,300,400,700,900&subset=latin,latin-ext');

	// Themify Icons
	wp_enqueue_style( 'themify-icons', THEME_URI . '/themify/themify-icons/themify-icons.css', array(), $theme_version);

	// Themify base styling
	wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array(), $theme_version);

	// Themify Media Queries CSS
	wp_enqueue_style( 'themify-media-queries', THEME_URI . '/media-queries.css', array(), $theme_version);

	///////////////////
	//Enqueue scripts
	///////////////////

	// Enqueue media element in pages that will load album in lightbox
	if ( ( isset( $themify->query_post_type ) && 'album' == $themify->query_post_type ) || is_tax( 'album-category' ) || is_tax( 'album-tag' ) ) {
		wp_enqueue_style( 'wp-mediaelement' );
		wp_enqueue_script( 'wp-mediaelement' );
	}

	// Masonry
	wp_enqueue_script( 'themify-masonry', THEME_URI . '/js/jquery.masonry.min.js', array(), $theme_version, true );

	// Row highlight
	wp_enqueue_script( 'themify-scroll-highlight', THEME_URI . '/js/themify.scroll-highlight.js', array(), $theme_version, true );

	// Social share
	wp_enqueue_script( 'sharrre', THEME_URI . '/js/jquery.sharrre.js', array('jquery'), false, true );

	// Slide mobile navigation menu
	wp_enqueue_script( 'slide-nav', THEME_URI . '/js/jquery.sidr.min.js', array('jquery'), $theme_version, true );

	// Auto Height iframe plugin
	wp_enqueue_script( 'auto-height-iframe', THEME_URI . '/js/jquery.iframe-auto-height.js', array('jquery'), false, true );

	// Themify custom lightbox
	wp_enqueue_script( 'themibox', THEME_URI . '/js/themibox.js', array('jquery'), $theme_version, true );

	// Dominant Color
	wp_enqueue_script( 'themify-dominant-color', THEME_URI . '/js/jquery.dominant-color.js', array(), $theme_version, true );

	// Themify internal scripts
	wp_enqueue_script( 'theme-script',	THEME_URI . '/js/themify.script.js', array('jquery'), $theme_version, true );

	// Themify Gallery
	wp_enqueue_script( 'themify-gallery', THEMIFY_URI . '/js/themify.gallery.js', array('jquery'), false, true );

	// Prepare JS variables
	$themify_script_vars = array(
		'lightbox' => themify_lightbox_vars_init(),
		'lightboxContext' => apply_filters('themify_lightbox_context', '#pagewrap'),
		'isTouch' => themify_is_touch()? 'true': 'false',
		'sharrrephp'	=> THEME_URI . '/includes/sharrre.php',
		'sharehtml'		=> apply_filters('themify_share_html', sprintf( '

			<div class="box">
				<a href="#" class="share">%s</a>
				<a href="#" class="share-icon"></a>
			</div>

			<div class="social-share clearfix">

				<div class="twitter-share sharrre">
					<a href="#">
						<div class="share"><span></span></div>
						<div href="#" class="count"></div>
					</a>
				</div>

				<div class="facebook-share sharrre">
					<a href="#">
						<div class="share"><span></span></div>
						<div href="#" class="count"></div>
					</a>
				</div>

				<div class="pinterest-share sharrre">
					<a href="#">
						<div class="share"><span></span></div>
						<div href="#" class="count"></div>
					</a>
				</div>

				<div class="googleplus-share sharrre">
					<a href="#">
						<div class="share"><span></span></div>
						<div href="#" class="count"></div>
					</a>
				</div>

			</div> <!-- .social-share -->

			',
			__( 'Share', 'themify' ))
		),
		'fixedHeader' 	=> themify_check('setting-fixed_header_disabled')? '': 'fixed-header',
		'ajax_nonce'	=> wp_create_nonce('ajax_nonce'),
		'ajax_url'		=> admin_url( 'admin-ajax.php' ),
		// Screen size at which horizontal menu is moved into side panel
		'smallScreen' => '760',
		// Resize refresh rate
		'resizeRefresh' => '250',
		// Video File ratio
		'videoRatio' => '1.777777777777778',
		'parallaxHeader' => apply_filters( 'themify_parallax_header', true ),
		// Themify Custom Lightbox
		'themibox' => array(
			'close' => '<i class="close-lightbox ti-close"></i>',
		),
		// Color animation
		'colorAnimation' => themify_check( 'setting-color_animation_enabled' ) ? 'animated-bg' : '',
		'colorAnimationSpeed' => themify_check( 'setting-color_animation_speed' ) ? (int) themify_get( 'setting-color_animation_speed' ) * 1000 : '5000',
	);

	// Set colors for color animation
	$color_key = 'setting-color_stop_';
	$colors = array();
	for ( $i = 1; $i <= 7; $i++ ) {
		if ( themify_check( $color_key . $i ) ) {
			$colors[] = '#' . themify_get( $color_key . $i );
		}
	}
	// If there are no colors set in theme settings, use default colors
	if ( empty( $colors ) ) {
		$colors = array(
			'#000000',
			'#e33b9e',
			'#4961d7',
			'#2ea85c',
			'#2bb8ed',
			'#dd5135',
		);
	}
	// Assign set of colors to pass to JavaScript
	$themify_script_vars['colorAnimationSet'] = implode( ',', $colors );

	wp_enqueue_script( 'themify-animated-bg', THEMIFY_URI . '/js/animated-bg.js', array( 'jquery', 'theme-script', 'jquery-ui-core', 'jquery-effects-core' ), THEMIFY_VERSION, true );

	// Inject variable values in gallery script
	wp_localize_script( 'theme-script', 'themifyScript', $themify_script_vars );
	
	// WordPress internal script to move the comment box to the right place when replying to a user
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );
}

/**
 * Disable Parallax header on mobile devices
 * @param bool $bool 
 * @return bool
 */
function themify_disable_parallax_header_on_mobile( $bool ) {
	if ( themify_is_touch() ) $bool = false;
	return $bool;
}

/**
 * Add JavaScript files if IE version is lower than 9
 * @since 1.0.0
 */
function themify_ie_enhancements() {
	echo "\n".'
	<!-- media-queries.js -->
	<!--[if lt IE 9]>
		<script src="' . THEME_URI . '/js/respond.js"></script>
	<![endif]-->
	
	<!-- html5.js -->
	<!--[if lt IE 9]>
		<script src="'.themify_https_esc('http://html5shim.googlecode.com/svn/trunk/html5.js').'"></script>
	<![endif]-->
	'."\n";
}

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
	echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">'."\n";
}

/**
 * Make IE behave like a standards-compliant browser
 * @since 1.0.0 
 */
function themify_ie_standards_compliant() {
	echo "\n".'
	<!--[if lt IE 9]>
	<script src="'.themify_https_esc('http://s3.amazonaws.com/nwapi/nwmatcher/nwmatcher-1.2.5-min.js').'"></script>
	<script type="text/javascript" src="'.themify_https_esc('http://cdnjs.cloudflare.com/ajax/libs/selectivizr/1.0.2/selectivizr-min.js').'"></script> 
	<![endif]-->
	'."\n";
}

/* Custom Write Panels
/***************************************************************************/

///////////////////////////////////////
// Build Write Panels
///////////////////////////////////////

if ( ! function_exists( 'themify_theme_init_types' ) ) {
	/**
	 * Initialize custom panel with its definitions
	 * Custom panel definitions are located in admin/post-type-TYPE.php
	 * @since 1.0.0
	 */
	function themify_theme_init_types() {
		// Load required files for post, page and custom post types where it applies
		foreach ( array( 'post', 'page', 'event', 'gallery', 'video', 'album', 'press' ) as $type ) {
			require_once( "admin/post-type-$type.php" );
		}
		/**
		 * Navigation menus used in page custom panel to specify a custom menu for the page.
		 * @var array
		 * @since 1.2.7
		 */
		$nav_menus = array(	array( 'name' => '', 'value' => '', 'selected' => true ) );
		foreach ( get_terms( 'nav_menu' ) as $menu ) {
			$nav_menus[] = array( 'name' => $menu->name, 'value' => $menu->slug );
		}

		themify_build_write_panels( apply_filters('themify_theme_meta_boxes',
			array(
				array(
					'name'		=> __('Post Options', 'themify'),
					'id' 		=> 'post-options',
					'options'	=> themify_theme_post_meta_box(),
					'pages'		=> 'post'
				),
				array(
					'name'		=> __('Page Options', 'themify'),
					'id' 		=> 'page-options',
					'options'	=> themify_theme_page_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Posts', 'themify'),
					'id'		=> 'query-posts',
					'options'	=> themify_theme_query_post_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Events', 'themify'),
					'id' 		=> 'query-event',
					'options'	=> themify_theme_query_event_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Videos', 'themify'),
					'id' 		=> 'query-video',
					'options'	=> themify_theme_query_video_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Galleries', 'themify'),
					'id' 		=> 'query-gallery',
					'options'	=> themify_theme_query_gallery_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Albums', 'themify'),
					'id' 		=> 'query-album',
					'options'	=> themify_theme_query_album_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Press', 'themify'),
					'id' 		=> 'query-press',
					'options'	=> themify_theme_query_press_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Event Options', 'themify'),
					'id' 		=> 'event-options',
					'options'	=> themify_theme_event_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'event'
				),
				array(
					'name'		=> __('Video Options', 'themify'),
					'id' 		=> 'video-options',
					'options'	=> themify_theme_video_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'video'
				),
				array(
					'name'		=> __('Gallery Options', 'themify'),
					'id' 		=> 'gallery-options',
					'options'	=> themify_theme_gallery_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'gallery'
				),
				array(
					'name'		=> __('Album Options', 'themify'),
					'id' 		=> 'album-options',
					'options'	=> themify_theme_album_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'album'
				),
				array(
					'name'		=> __( 'Album Tracks', 'themify' ),
					'id' 		=> 'album-tracks',
					'options'	=> themify_theme_tracks_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'album'
				),
				array(
					'name'		=> __( 'Press Options', 'themify' ),
					'id' 		=> 'press-options',
					'options'	=> themify_theme_press_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'press'
				),
			)
		));
	}
}

/* Custom Functions
/***************************************************************************/	

///////////////////////////////////////
// Enable WordPress feature image
///////////////////////////////////////
add_theme_support( 'post-thumbnails' );
remove_post_type_support( 'page', 'thumbnail' );

if ( ! function_exists( 'themify_register_custom_nav' ) ) {
	/**
	 * Register Custom Menu Function
	 * @since 1.0.0
	 */
	function themify_register_custom_nav() {
		register_nav_menus( array(
			'main-nav' => __( 'Main Navigation', 'themify' ),
			'footer-nav' => __( 'Footer Navigation', 'themify' ),
		));
	}
}

if ( ! function_exists( 'themify_default_main_nav' ) ) {
	/**
	 * Default Main Nav Function
	 * @since 1.0.0
	 */
	function themify_default_main_nav() {
		echo '<ul id="main-nav" class="main-nav clearfix">';
			wp_list_pages('title_li=');
		echo '</ul>';
	}
}

/**
 * Sets custom menu selected in page custom panel as navigation, otherwise sets the default.
 *
 * @since 1.0.0
 */
function themify_theme_menu_nav() {
	$custom_menu = themify_get( 'custom_menu' );
	if ( isset( $custom_menu ) && '' != $custom_menu ) {
		wp_nav_menu( array(
			'menu' => $custom_menu,
			'fallback_cb' => 'themify_default_main_nav',
			'container' => '',
			'menu_id' => 'main-nav',
			'menu_class' => 'main-nav'
		));
	} else {
		wp_nav_menu( array(
			'theme_location' => 'main-nav',
			'fallback_cb'    => 'themify_default_main_nav',
			'container'      => '',
			'menu_id'        => 'main-nav',
			'menu_class'     => 'main-nav'
		));
	}
}

if ( ! function_exists( 'themify_theme_register_sidebars' ) ) {
	/**
	 * Register sidebars
	 * @since 1.0.0
	 */
	function themify_theme_register_sidebars() {
		$sidebars = array(
			array(
				'name' => __('Sidebar', 'themify'),
				'id' => 'sidebar-main',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h4 class="widgettitle">',
				'after_title' => '</h4>',
			),
			array(
				'name' => __('Social Widget', 'themify'),
				'id' => 'social-widget',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<strong class="widgettitle">',
				'after_title' => '</strong>',
			)
		);
		foreach( $sidebars as $sidebar ) {
			register_sidebar( $sidebar );
		}

		// Footer Sidebars
		themify_register_grouped_widgets();
	}
}

if ( ! function_exists( 'themify_theme_comment' ) ) {
	/**
	 * Custom Theme Comment
	 * @param object $comment Current comment.
	 * @param array $args Parameters for comment reply link.
	 * @param int $depth Maximum comment nesting depth.
	 */
	function themify_theme_comment( $comment, $args, $depth ) {
	   $GLOBALS['comment'] = $comment; ?>

		<li id="comment-<?php comment_ID() ?>" <?php comment_class(); ?>>
			<p class="comment-author">
				<?php echo get_avatar( $comment, $size = '50' ); ?>
				<cite><?php echo get_comment_author_link(); ?></cite>
				<br/>
				<small class="comment-time">
					<?php comment_date( apply_filters('themify_comment_date', 'M d, Y') ); ?>
					 @
					<?php comment_time( apply_filters('themify_comment_time', 'H:i:s') ); ?>
					<?php edit_comment_link( __('Edit', 'themify'),' [',']'); ?>
				</small>
			</p>
			<div class="commententry">
				<?php if ($comment->comment_approved == '0') : ?>
					<p><em><?php _e('Your comment is awaiting moderation.', 'themify') ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
			<span class="reply">
				<?php comment_reply_link(array_merge( $args, array('add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'themify' ), 'max_depth' => $args['max_depth']))) ?>
			</span>
		<?php
	}
}

if ( ! function_exists( 'themify_theme_has_submenu' ) ) {
	/**
	 * Sets custom class if menu item has a submenu.
	 * @param array $sorted_menu_items The menu items to filter.
	 * @return array The filtered menu items.
	 * @since 1.0.0
	 */
	function themify_theme_has_submenu( $sorted_menu_items ) {
		$last_top = 0;
		foreach ( $sorted_menu_items as $key => $obj ) {
			if ( 0 == $obj->menu_item_parent ) {
				$last_top = $key;
			} else {
				$sorted_menu_items[$last_top]->classes['has-sub-menu'] = 'has-sub-menu';
			}
		}
		return $sorted_menu_items;
	}
	add_filter( 'wp_nav_menu_objects', 'themify_theme_has_submenu', 10 );
}

if ( ! function_exists( 'themify_theme_likeit' ) ) {
	/**
	 * Checks liker's IP and saves it to the post if it's not already in likers list.
	 * @since 1.0.0
	 */
	function themify_theme_likeit() {
		check_ajax_referer( 'ajax_nonce', 'nonce' );

		$post_id = $_POST['post_id'];

		$ip = $_SERVER['REMOTE_ADDR'];

		$current_likers = trim( get_post_meta($post_id, 'likers', true) );

		if( isset( $current_likers ) && '' != $current_likers ) {
			$current_likers_count = count( explode( ',', $current_likers ) );
		} else {
			$current_likers_count = 0;
		}

		if( false === stripos( $current_likers, $ip ) ) {

			$save_likers = isset( $current_likers ) && '' != $current_likers? $current_likers . ',' . $ip :	$ip;

			$update_result = update_post_meta($post_id, 'likers', $save_likers);

			if ( $update_result ) {
				echo json_encode( array(
					'status' => 'new',
					'likers' => $current_likers_count + 1,
					'ip' => $ip
				) );
			} else {
				echo json_encode( array(
					'status' => 'failed',
					'ip' => $ip
				) );
			}
		} else {
			echo json_encode( array(
				'status' => 'isliker',
				'ip' => $ip
			) );
		}
		die();
	}
	add_action('wp_ajax_themify_likeit', 'themify_theme_likeit');
	add_action('wp_ajax_nopriv_themify_likeit', 'themify_theme_likeit');
}

if ( ! function_exists( 'themify_theme_get_like' ) ) {
	/**
	 * Return number of likers or 0
	 * @param bool $echo Whether to echo or just return
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_get_like( $echo = false ) {
		if( $current_likers = themify_get('likers') ) {
			$likers = explode(',', trim($current_likers));
			$count = count($likers);
		} else {
			$count = '0';
		}
		if ( $echo ) echo $count;
		return $count;
	}
}

if ( ! function_exists( 'themify_theme_is_liker' ) ) {
	/**
	 * Check if visitor already likes this entry
	 * @param bool $echo Whether to echo or just return
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_is_liker( $post_id ) {
		$current_likers = trim( get_post_meta($post_id, 'likers', true) );
		if( false === stripos( $current_likers, $_SERVER['REMOTE_ADDR'] ) ) {
			// IP wasn't found among likers, he doesn't like this yet
			return false;
		} else {
			// IP was found among likers, he likes this already
			return true;
		}
	}
}

if ( ! function_exists( 'themify_theme_set_pageviews' ) ) {
	/**
	 * Sets the page view count for this entry.
	 * @since 1.0.0
	 */
	function themify_theme_set_pageviews() {
		if ( is_singular() ) {
			$post_id = get_the_ID();
			$field = 'themify_pageviews';
			$count = intval( get_post_meta( $post_id, $field, true ) );
			$count++;
			update_post_meta( $post_id, $field, $count );
		}
	}
	add_action( 'wp_head', 'themify_theme_set_pageviews' );
}

if ( ! function_exists( 'themify_theme_get_pageviews' ) ) {
	/**
	 * Returns the page view count for this entry.
	 * @return int|mixed
	 * @since 1.0.0
	 */
	function themify_theme_get_pageviews() {
		if ( $count = intval( get_post_meta( get_the_ID(), 'themify_pageviews', true ) ) ) {
			$out = themify_theme_get_short_number( $count );
		} else {
			$out = 0;
		}
		return $out;
	}
}

if ( ! function_exists( 'themify_theme_get_short_number' ) ) {
	/**
	 * Returns an abbreviated number.
	 * @param $count
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_get_short_number( $count ) {
		/**
		 * @param int $precision The number of decimals.
		 */
		$precision = apply_filters( 'themify_theme_short_number_precision', 1 );
		if ( $count > 999 && $count <= 999999 ) {
			$out = sprintf( '%sk', number_format( $count / 1000, $precision ) );
		} else if ( $count > 999999 && $count <= 999999999 ) {
			$out = sprintf( '%sm', number_format( $count / 1000000, $precision ) );
		} else if ( $count > 999999999 ) {
			$out = sprintf( '%sb', number_format( $count / 1000000000, $precision ) );
		} else {
			$out = $count;
		}
		return $out;
	}
}

if ( ! function_exists( 'themify_theme_content_width' ) ) {
	/**
	 * Checks if the single post or page has default or full width.
	 * @param array $classes
	 * @return array
	 * @since 1.0.0
	 */
	function themify_theme_content_width( $classes = array() ) {
		$classes[] = themify_check( 'content_width' ) ? themify_get( 'content_width' ) : 'default_width';
		$classes[] = themify_check( 'setting-fixed_header_disabled' ) ? '' : 'has-fixed-header';
		if ( ( is_single() || is_page() ) && 'transparent' == themify_get( 'header_wrap' ) ) {
			$classes[] = 'transparent-header';
		}
		return $classes;
	}
	add_filter( 'body_class', 'themify_theme_content_width' );
}

if ( ! function_exists( 'themify_theme_custom_post_css' ) ) {
	/**
	 * Outputs custom post CSS at the end of a post
	 * @since 1.0.0
	 */
	function themify_theme_custom_post_css() {
		global $themify;
		if ( in_array( get_post_type(), array( 'event', 'gallery', 'video', 'album', 'press', 'page' ) ) ) {
			if ( is_page() ) {
				$post_id = '.page-id-' . get_the_ID() . ' #headerwrap';
			} else {
				$post_id = '.postid-' . get_the_ID() . ' #headerwrap';
			}
			$css = array();
			$style = '';
			$rules = array();
			if ( 'transparent' != themify_get( 'header_wrap' ) ) {
				$rules = array(
					$post_id => array(
						array(
							'prop' => 'background-color',
							'key'  => 'background_color'
						),
						array(
							'prop' => 'background-image',
							'key'  => 'background_image'
						),
						array(
							'prop' => 'background-repeat',
							'key'  => 'background_repeat'
						)
					),
				);
			}
			foreach ( $rules as $selector => $property ) {
				foreach ( $property as $val ) {
					$prop = $val['prop'];
					$key = $val['key'];
					if ( is_array( $key ) ) {
						if ( $prop == 'font-size' && themify_check( $key[0] ) ) {
							$css[$selector][$prop] = $prop . ': ' . themify_get( $key[0] ) . themify_get( $key[1] );
						}
					} elseif ( themify_check( $key ) && 'default' != themify_get( $key ) ) {
						if ( $prop == 'color' || stripos( $prop, 'color' ) ) {
							$css[$selector][$prop] = $prop . ': #' . themify_get( $key );
						}
						elseif ( $prop == 'background-image' && 'default' != themify_get( $key ) ) {
							$css[$selector][$prop] = $prop .': url(' . themify_get( $key ) . ')';
						}
						elseif ( $prop == 'background-repeat' && 'fullcover' == themify_get( $key ) ) {
							continue;
						}
						elseif ( $prop == 'font-family' ) {
							$font = themify_get( $key );
							$css[$selector][$prop] = $prop .': '. $font;
							if ( ! in_array( $font, themify_get_web_safe_font_list( true ) ) ) {
								$themify->google_fonts .= str_replace( ' ', '+', $font.'|' );
							}
						}
						else {
							$css[$selector][$prop] = $prop .': '. themify_get( $key );
						}
					}
				}
				if ( ! empty( $css[$selector] ) ) {
					$style .= "$selector {\n\t" . implode( ";\n\t", $css[$selector] ) . "\n}\n";
				}
			}

			if ( '' != $style ) {
				echo "\n<!-- Entry Style -->\n<style>\n$style</style>\n<!-- End Entry Style -->\n";
			}
		}
	}
	add_action( 'themify_content_after', 'themify_theme_custom_post_css' );
}

if ( ! function_exists( 'themify_theme_featured_area_style' ) ) {
	function themify_theme_featured_area_style() {
		return themify_check('background_repeat')? themify_get('background_repeat'):'';
	}
}

if ( ! function_exists( 'themify_theme_maybe_do_animated_bg' ) ) {
	/**
	 * Checks if .animated-bg must be set and sets the first animation color as initial background
	 *
	 * @return string
	 */
	function themify_theme_maybe_do_animated_bg() {
		if ( is_singular() && ! is_singular( 'post' ) ) {
			if ( themify_check( 'background_color' ) || ( themify_check( 'header_wrap' ) && 'transparent' == themify_get( 'header_wrap' ) ) ) {
				return '';
			}
		}
		// Set first color as initial background-color to avoid a color jump
		$first_color = themify_check( 'setting-color_stop_1' ) ? themify_get( 'setting-color_stop_1' ) : '000000';
		return themify_check( 'setting-color_animation_disabled' ) ? '' : ' style="background-color: #' . $first_color . ';"';
	}
}